/**
 * This file is part of Guardian.
 *
 * Guardian is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Guardian is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Guardian. If not, see <https://www.gnu.org/licenses/>.
 *
 * @author Lukas Reiter
 * @copyright Copyright (C) 2024 Lukas Reiter
 * @license GPLv3
 */

import React from "react";
import { Alert } from "@mui/material";
import { Link } from "react-router-dom";
import { GridRowParams, GridValidRowModel } from "@mui/x-data-grid";
import {
  VulnerabilityTemplateRead as ObjectRead,
  COLUMN_DEFINITION,
  URL_VULNERABILITY_TEMPLATES_PREFIX as URL,
  queryKeyVulnerabilityTemplates,
} from "../models/vulnerabilityTemplate";
import { MainPages } from "../models/enums";
import VulnerabilityTemplateDetailsDialog from "../components/inputs/dialogs/vulnerability/VulnerabilityTemplateDetailsDialog";
import { PagesDataGridv2 } from "../components/data/datagrid/PagesDataGrid";
import LoadingIndicator from "../components/feedback/LoadingIndicator";
import UseMutationSnackbarAlert from "../components/feedback/snackbar/UseMutationSnackbarAlert";
import MainPaper from "../layout/MainPaper";
import ConfirmationDialog from "../components/feedback/ConfirmationDialog";
import {
  useLuminaCore,
  DataGridActionSettingsType,
} from "../util/hooks/useLuminaCore";
import {
  renderCellVulnerabilityTemplate as renderCell,
  valueGetterVulnerabilityTemplate as valueGetter,
} from "./Common";
import RefreshProgress from "../components/feedback/RefreshProgress";

interface VulnerabilityTemplatesProps {
  dataGridActionSettings?: DataGridActionSettingsType;
  addDataGridRecord?: (
    selectedTableRow: GridRowParams<GridValidRowModel>
  ) => void;
  // Allows filtering specific rows.
  filterFn?: (row: any) => boolean;
  style?: React.CSSProperties;
  queryUrl?: string;
  queryKey?: any[];
  navigateable?: boolean;
}

const VulnerabilityTemplates = React.memo(
  ({
    dataGridActionSettings,
    addDataGridRecord,
    filterFn,
    style,
    queryUrl,
    queryKey,
    navigateable,
  }: VulnerabilityTemplatesProps) => {
    const context = useLuminaCore({
      columnDefinition: COLUMN_DEFINITION,
      dataApiEndpoint: React.useMemo(
        () => (queryUrl ? queryUrl : URL),
        [queryUrl]
      ),
      dataQueryKey: React.useMemo(
        () => (queryKey ? queryKey : queryKeyVulnerabilityTemplates),
        [queryKey]
      ),
      submissionApiEditEndpoint: URL,
      submissionQueryKey: queryKeyVulnerabilityTemplates,
      dataGridActionSettings,
      addDataGridRecord,
      dataConvertFn: (data: any[]) => data.map((d) => new ObjectRead(d)),
      pageType: MainPages.VulnerabilityTemplates,
      navigateable: (navigateable ?? true) == true,
    });
    const {
      isLoadingAll,
      query,
      pageManagerContext,
      deletionMutation,
      confirmationDialogState,
      getDefaultDataGridActions,
      handleCreateDataGridRecord,
      languageQuery,
      reportLanguages,
    } = context;
    const convertDataFn = React.useCallback(
      (data: any) => new ObjectRead(data),
      []
    );

    if (languageQuery.isSuccess && reportLanguages.length === 0) {
      return (
        <Alert severity="info">
          Please define a report language first by clicking{" "}
          <Link to="/languages">here</Link>.
        </Alert>
      );
    }

    if (query.isError) {
      return <Alert severity="error">Error loading data</Alert>;
    }

    return (
      <>
        <LoadingIndicator open={isLoadingAll} />
        <ConfirmationDialog {...confirmationDialogState} />
        {/*For each operation we maintain our own notification bar, which allows reseting the respective mutation status to its original state.*/}
        <UseMutationSnackbarAlert
          mutation={pageManagerContext.putMutation}
          successMessage="Vulnerability template successfully updated."
        />
        <UseMutationSnackbarAlert
          mutation={pageManagerContext.postMutation}
          successMessage="Vulnerability template successfully created."
        />
        <UseMutationSnackbarAlert
          mutation={deletionMutation}
          successMessage="Vulnerability template successfully deleted."
        />
        <VulnerabilityTemplateDetailsDialog
          open={false}
          context={pageManagerContext}
        />
        <MainPaper>
          <div style={{ ...style, height: "83vh" }}>
            <PagesDataGridv2
              dataConvertFn={convertDataFn}
              context={context}
              getCellValueFn={valueGetter}
              renderCellFn={renderCell}
              filterFn={filterFn}
              getTableActions={getDefaultDataGridActions}
              onNewButtonClick={handleCreateDataGridRecord}
            />
          </div>
        </MainPaper>
        <RefreshProgress query={query} />
      </>
    );
  }
);

export default VulnerabilityTemplates;
