/**
 * This file is part of Guardian.
 *
 * Guardian is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Guardian is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.
 *
 * @author Lukas Reiter
 * @copyright Copyright (C) 2024 Lukas Reiter
 * @license GPLv3
 */

import React from "react";
import axios from "axios";
import { GridRowParams, GridValidRowModel } from "@mui/x-data-grid";
import { useDataSubmission } from "../../../../util/hooks/useDataSubmission";
import { SnackbarAlertv2 } from "../../../feedback/snackbar/SnackbarAlert";
import VulnerabilityTemplates from "../../../../pages/VulnerabilityTemplates";
import { QueryKey } from "@tanstack/react-query";

interface AddVulnerabilitiesFormProps {
  // The procedure's UUID
  procedureId?: string;
  submissionBaseUrl: string;
  // If present adds the procedureId to the submission query key
  submissionBaseQueryKey?: QueryKey;
  // If present just uses this query key without adding the procedureId
  submissionQueryKey?: QueryKey;
  queryBaseUrl?: string;
  queryBaseQueryKey?: QueryKey;
  filterUsedRows?: (row: any) => boolean;
  style?: React.CSSProperties | undefined;
}

const AddVulnerabilitiesForm: React.FC<AddVulnerabilitiesFormProps> = (
  props
) => {
  const {
    procedureId,
    submissionBaseUrl,
    submissionBaseQueryKey,
    submissionQueryKey,
    queryBaseUrl,
    queryBaseQueryKey,
  } = props;
  if (!submissionQueryKey && !submissionBaseQueryKey) {
    throw new Error(
      "At least one of submissionQueryKey or submissionBaseQueryKey must be set."
    );
  }
  const submissionUrl = React.useMemo(
    () =>
      procedureId
        ? submissionBaseUrl.replace("{procedure_id}", procedureId)
        : submissionBaseUrl,
    [submissionBaseUrl, procedureId]
  );
  const submQueryKey = React.useMemo(
    () =>
      submissionBaseQueryKey
        ? [...submissionBaseQueryKey, procedureId]
        : submissionQueryKey,
    [procedureId, submissionBaseQueryKey, submissionQueryKey]
  );
  const queryUrl = React.useMemo(
    () =>
      procedureId
        ? queryBaseUrl?.replace("{procedure_id}", procedureId)
        : queryBaseUrl,
    [queryBaseUrl, procedureId]
  );
  const queryQueryKey = React.useMemo(
    () => (queryBaseQueryKey ? [...queryBaseQueryKey, procedureId] : undefined),
    [procedureId, queryBaseQueryKey]
  );
  // Create hook to add vulnerabilities to test procedure
  const submit = useDataSubmission();

  // Event handler to add the selected vulnerability to the given procedure
  const handleAddButtonClicked = React.useCallback(
    (selectedTableRow: GridRowParams<GridValidRowModel>) => {
      // Update the backend by assigning the current
      submit.performSubmission({
        dataSubmissionFn: async () =>
          await axios.post(submissionUrl + "/" + selectedTableRow.id),
        queryKey: submQueryKey,
      });
    },
    [submit, submissionUrl, submQueryKey]
  );

  return (
    <>
      <SnackbarAlertv2 context={submit} />
      <VulnerabilityTemplates
        queryUrl={queryUrl}
        queryKey={queryQueryKey}
        dataGridActionSettings={{
          showDelete: false,
          showEdit: true,
          showView: false,
        }}
        addDataGridRecord={handleAddButtonClicked}
        filterFn={props.filterUsedRows}
        style={props.style}
        navigateable={false}
      />
    </>
  );
};

export default AddVulnerabilitiesForm;
