/**
 * This file is part of Guardian.
 *
 * Guardian is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Guardian is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Guardian. If not, see <https://www.gnu.org/licenses/>.
 *
 * @author Lukas Reiter
 * @copyright Copyright (C) 2024 Lukas Reiter
 * @license GPLv3
 */

import React from "react";
import { Grid, Typography, Alert, Stack } from "@mui/material";
import {
  DefaultDetailsDialogProps,
  DetailsDialogv2 as DetailsDialog,
  Item,
} from "../DetailsDialog";
import DetailsDialogPaper from "../../../surfaces/DetailsDialogPager";
import { InputControlFieldWrapperv2 as InputControlFieldWrapper } from "../../InputControlWrapper";
import { queryKeyVulnerabilityTemplates } from "../../../../models/vulnerabilityTemplate";
import {
  COLUMN_DEFINITION,
  URL_RATINGS,
  queryKeyRatings,
  RatingRead,
} from "../../../../models/rating";
import {
  URL_MEASURES_PENTEST_LOOKUP,
  queryKeyMeasuresLookup,
} from "../../../../models/measure";
import { MainPages, DetailsDialogMode } from "../../../../models/enums";
import { isOptionEqualToValue } from "../../../../models/common";
import { PagesDataGridv2 } from "../../../data/datagrid/PagesDataGrid";
import LoadingIndicator from "../../../feedback/LoadingIndicator";
import ConfirmationDialog from "../../../feedback/ConfirmationDialog";
import UseMutationSnackbarAlert from "../../../feedback/snackbar/UseMutationSnackbarAlert";
import RatingDetailsDialog from "./RatingDetailsDialog";
import { useLuminaCore } from "../../../../util/hooks/useLuminaCore";
import {
  renderCellRatings,
  valueGetterRatings,
} from "../../../../pages/Common";

export interface VulnerabilityTemplateDetailsDialogProps
  extends DefaultDetailsDialogProps {
  apiEndpoint?: string;
}

const VulnerabilityTemplateDetailsDialog: React.FC<VulnerabilityTemplateDetailsDialogProps> =
  React.memo((props) => {
    const { context: parentPageManagerContext } = props;
    // Obtain the foreign key of the vulnerability.
    const vulnerabilityId =
      parentPageManagerContext.pageManager.content?.id?.toString();
    const ratingsUrl = vulnerabilityId
      ? URL_RATINGS.replace(":id", vulnerabilityId ?? "")
      : null;
    const context = useLuminaCore({
      columnDefinition: COLUMN_DEFINITION,
      dataApiEndpoint: ratingsUrl ?? "",
      dataQueryKey: [...queryKeyRatings, vulnerabilityId ?? ""],
      dataConvertFn: (data: any[]) => data.map((d) => new RatingRead(d)),
      dataQueryEnabled:
        ratingsUrl !== null &&
        (parentPageManagerContext.pageManager.mode === DetailsDialogMode.View ||
          parentPageManagerContext.pageManager.mode === DetailsDialogMode.Edit),
      pageType: MainPages.Ratings,
      // We have to disable navigation via URLs, because we are already in a details view.
      navigateable: false,
      invalidateQueryKeys: [queryKeyVulnerabilityTemplates],
    });
    const {
      isLoadingAll,
      pageManagerContext,
      deletionMutation,
      confirmationDialogState,
      getDefaultDataGridActions,
      handleCreateDataGridRecord,
    } = context;

    // console.log("VulnerabilityTemplate page", context);

    return (
      <>
        <LoadingIndicator open={isLoadingAll} />
        <ConfirmationDialog {...confirmationDialogState} />
        {/*For each operation we maintain our own notification bar, which allows reseting the respective mutation status to its original state.*/}
        <UseMutationSnackbarAlert
          mutation={pageManagerContext.putMutation}
          successMessage="Rating successfully updated."
        />
        <UseMutationSnackbarAlert
          mutation={pageManagerContext.postMutation}
          successMessage="Rating successfully created."
        />
        <UseMutationSnackbarAlert
          mutation={deletionMutation}
          successMessage="Rating successfully deleted."
        />
        <RatingDetailsDialog open={false} context={pageManagerContext} />
        <DetailsDialog disableEscapeKeyDown maxWidth="xl" fullWidth {...props}>
          <DetailsDialogPaper>
            <Grid container spacing={2}>
              <Grid item xs={6} md={12}>
                <Item>
                  {/*Here, we create a language tab containing all multi-language controls. In this case, the InputControlFieldWrapper */}
                  <InputControlFieldWrapper
                    // id="project_types"
                    context={parentPageManagerContext}
                  />
                </Item>
              </Grid>
            </Grid>
          </DetailsDialogPaper>
          <DetailsDialogPaper>
            <Grid container spacing={2}>
              <Grid item xs={6} md={12}>
                <Item>
                  <InputControlFieldWrapper
                    id="vrt"
                    context={parentPageManagerContext}
                  />
                </Item>
                <Item>
                  <InputControlFieldWrapper
                    id="cwe_weakness"
                    context={parentPageManagerContext}
                  />
                </Item>
              </Grid>
              <Grid item xs={6} md={12}>
                <Item>
                  <InputControlFieldWrapper
                    id="general_tags"
                    context={parentPageManagerContext}
                  />
                </Item>
              </Grid>
              <Grid item xs={6} md={12}>
                <Item>
                  <InputControlFieldWrapper
                    id="measures"
                    context={parentPageManagerContext}
                    apiEndpoint={URL_MEASURES_PENTEST_LOOKUP}
                    queryKey={queryKeyMeasuresLookup}
                    getOptionLabel={(option) => option.name}
                    isOptionEqualToValue={isOptionEqualToValue}
                  />
                </Item>
              </Grid>
              <Grid item xs={6} md={4}>
                <Item>
                  <InputControlFieldWrapper
                    id="automate"
                    context={parentPageManagerContext}
                  />
                </Item>
              </Grid>
            </Grid>
          </DetailsDialogPaper>
          <DetailsDialogPaper>
            <Grid container spacing={2}>
              {/*Line 4*/}
              <Grid item xs={6} md={12}>
                <Item>
                  <InputControlFieldWrapper
                    id="references"
                    context={parentPageManagerContext}
                    minRows={5}
                    maxRows={5}
                  />
                </Item>
              </Grid>
            </Grid>
          </DetailsDialogPaper>
          <DetailsDialogPaper sx={{ display: "block" }}>
            <Stack>
              <Item>
                <Typography variant="h6">Ratings</Typography>
              </Item>
              <Item style={{ height: 350 }}>
                {parentPageManagerContext.pageManager.mode ===
                  DetailsDialogMode.View ||
                parentPageManagerContext.pageManager.mode ===
                  DetailsDialogMode.Edit ? (
                  <PagesDataGridv2
                    dataConvertFn={(data: any) => new RatingRead(data)}
                    context={context}
                    getCellValueFn={valueGetterRatings}
                    renderCellFn={renderCellRatings}
                    getTableActions={getDefaultDataGridActions}
                    onNewButtonClick={handleCreateDataGridRecord}
                  />
                ) : (
                  <Alert severity="info" sx={{ m: 1, mb: 3 }}>
                    You must create the vulnerability first.
                  </Alert>
                )}
              </Item>
            </Stack>
          </DetailsDialogPaper>
        </DetailsDialog>
      </>
    );
  });

export default VulnerabilityTemplateDetailsDialog;
