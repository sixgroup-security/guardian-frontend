/**
 * This file is part of Guardian.
 *
 * Guardian is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Guardian is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Guardian. If not, see <https://www.gnu.org/licenses/>.
 *
 * @author Lukas Reiter
 * @copyright Copyright (C) 2024 Lukas Reiter
 * @license GPLv3
 */

import React from "react";
import { Grid, Tab } from "@mui/material";
import {
  GridRowParams,
  GridValidRowModel,
  GridActionsCellItem,
  GridActionsCellItemProps,
} from "@mui/x-data-grid";
import ArrowDownwardIcon from "@mui/icons-material/ArrowDownward";
import { Item } from "../../DetailsDialog";
import { InputControlFieldWrapperv2 as InputControlFieldWrapper } from "../../../InputControlWrapper";
import { useQuery } from "../../../../../util/hooks/tanstack/useQuery";
import LoadingIndicator from "../../../../feedback/LoadingIndicator";
import {
  MainPages,
  SeverityType,
  getEnumAsObject,
  VulnerabilityStatus,
} from "../../../../../models/enums";
import {
  isNotNullUndefined,
  isOptionEqualToValue,
  isValidString,
} from "../../../../../models/common";
import {
  COLUMN_DEFINITION_FOR_VULNERABILITIES as RATING_COLUMN_DEFINITION,
  queryKeyRatings,
  RatingRead,
} from "../../../../../models/rating";
import CvssCalculatorButton from "../../../CvssCalculatorButton";
import UseMutationSnackbarAlert from "../../../../feedback/snackbar/UseMutationSnackbarAlert";
import SaveSpeedDial from "../../../../navigation/SaveSpeedDial";
import DetailsDialogPaper from "../../../../surfaces/DetailsDialogPager";
import PagesDataGrid from "../../../../data/datagrid/PagesDataGrid";
import { useQueryUserMe } from "../../../../../util/hooks/tanstack/useQueryUserMe";
import PageManagerSnackbarAlert from "../../../../feedback/snackbar/PageManagerSnackbarAlert";
import { UsePageManagerReturn } from "../../../../../util/hooks/usePageManager";
import {
  COLUMN_DEFINITION_VULNERABILITY_MEASURE_LOOKUP,
  MeasureLookup,
  MeasureResolveLookup,
  URL_MEASURES,
  queryKeyMeasures,
} from "../../../../../models/measure";
import TabbedPane from "../../../../navigation/TabbedPane";
import { TabPanel } from "@mui/lab";
import { UseQueryResult } from "@tanstack/react-query";
import { User } from "../../../../../models/user";
import { ReportTestingRead } from "../../../../../models/report";
import {
  valueGetterRatings as valueGetter,
  renderCellRatings as renderCell,
} from "../../../../../pages/Common";

export interface VulnerabilityFormProps {
  queryUrl?: string;
  vulnerabilityId?: string;
  context: UsePageManagerReturn;
  // Specifies if the vulnerability is a template or not.
  isTemplate: boolean;
  report?: ReportTestingRead;
}

export interface MeasureSelectionProps {
  vulnerabilityId: string | undefined;
  isTemplate: boolean;
  queryUrl?: string;
  meQuery: UseQueryResult<User, Error>;
  report?: ReportTestingRead;
  onMeasureSelect: (params: GridRowParams<GridValidRowModel>) => void;
}

const MeasureSelection = React.memo((props: MeasureSelectionProps) => {
  const {
    onMeasureSelect,
    vulnerabilityId,
    isTemplate,
    queryUrl,
    meQuery,
    report,
  } = props;
  const { data: measureData, isLoading } = useQuery({
    path: React.useMemo(() => (queryUrl ?? "") + "/measures", [queryUrl]),
    queryKey: React.useMemo(
      () => [...queryKeyMeasures, vulnerabilityId],
      [vulnerabilityId]
    ),
    convertFn: React.useCallback(
      (data: any[]) => data.map((d) => new MeasureLookup(d)),
      []
    ),
    enabled: isTemplate && queryUrl !== undefined,
  });
  const { data: allMeasureData, isLoading: isLoadingAllMeasures } = useQuery({
    path: URL_MEASURES,
    queryKey: queryKeyMeasures,
    convertFn: React.useCallback(
      (data: any[]) => data.map((d) => new MeasureResolveLookup(d, report!)),
      [report]
    ),
    enabled: report !== undefined && report.report_language !== undefined,
  });
  const { data: meData } = meQuery;

  const getMeasureGridActions = React.useCallback(
    (
      params: GridRowParams<GridValidRowModel>
    ): React.ReactElement<GridActionsCellItemProps>[] => [
      <GridActionsCellItem
        icon={<ArrowDownwardIcon />}
        label="Select"
        onClick={() => onMeasureSelect(params)}
      />,
    ],
    [onMeasureSelect]
  );

  const tabTitles = React.useMemo(() => {
    const result: JSX.Element[] = [];
    let tabCount = 0;
    if (isTemplate) {
      result.push(
        <Tab
          id={"measures"}
          key={"measures"}
          label={"Vuln.-specific measures"}
          value={tabCount.toString()}
        />
      );
      tabCount++;
    }
    result.push(
      <Tab
        id={"all"}
        key={"all"}
        label={"All measures"}
        value={tabCount.toString()}
      />
    );
    return result;
  }, [isTemplate]);

  const tabContents = React.useMemo(() => {
    const result: JSX.Element[] = [];
    let tabCount = 0;
    if (isTemplate) {
      result.push(
        <TabPanel
          id={"measures"}
          key={"measures"}
          value={tabCount.toString()}
          sx={{ pl: 0, pr: 0 }}
        >
          <Item sx={{ p: 0, height: "270px" }}>
            <PagesDataGrid
              page={MainPages.VulnerabilityMeasure}
              isLoading={isLoading}
              rows={measureData ?? []}
              user={meData!}
              columns={COLUMN_DEFINITION_VULNERABILITY_MEASURE_LOOKUP}
              renderCellFn={renderCell}
              getCellValueFn={valueGetter}
              getTableActions={getMeasureGridActions}
            />
          </Item>
        </TabPanel>
      );
      tabCount++;
    }
    result.push(
      <TabPanel
        id={"all"}
        key={"all"}
        value={tabCount.toString()}
        sx={{ pl: 0, pr: 0 }}
      >
        <Item sx={{ p: 0, height: "270px" }}>
          <LoadingIndicator open={isLoadingAllMeasures || isLoading} />
          <PagesDataGrid
            page={MainPages.VulnerabilityMeasure}
            isLoading={isLoadingAllMeasures}
            rows={allMeasureData ?? []}
            user={meData!}
            columns={COLUMN_DEFINITION_VULNERABILITY_MEASURE_LOOKUP}
            renderCellFn={renderCell}
            getCellValueFn={valueGetter}
            getTableActions={getMeasureGridActions}
          />
        </Item>
      </TabPanel>
    );
    return result;
  }, [
    measureData,
    isLoading,
    meData,
    getMeasureGridActions,
    allMeasureData,
    isLoadingAllMeasures,
    isTemplate,
  ]);

  return <TabbedPane tabTitles={tabTitles} tabContents={tabContents} />;
});

const VulnerabilityForm: React.FC<VulnerabilityFormProps> = React.memo(
  (props) => {
    const { context } = props;
    const { updateContent, setErrors, submitOnly } = context;
    const cvss_vector = context?.pageManager?.content.cvss_vector;
    const meQuery = useQueryUserMe();
    const ratingQuery = useQuery({
      path: React.useMemo(
        () => (props.queryUrl ?? "") + "/ratings",
        [props.queryUrl]
      ),
      queryKey: React.useMemo(
        () => [...queryKeyRatings, props.vulnerabilityId],
        [props.vulnerabilityId]
      ),
      convertFn: React.useCallback(
        (data: any[]) => data.map((d) => new RatingRead(d)),
        []
      ),
      enabled: props.isTemplate && props.queryUrl !== undefined,
    });

    const handleSelectRating = React.useCallback(
      (params: GridRowParams<GridValidRowModel>) => {
        updateContent({
          cvss_score: params.row.cvss_score,
          cvss_vector: params.row.cvss_vector,
          severity: params.row.severity,
          rating_comment: params.row.comment,
        });
      },
      [updateContent]
    );

    const handleSelectMeasure = React.useCallback(
      (params: GridRowParams<GridValidRowModel>) => {
        updateContent({
          measure_title: params.row.name,
          measure_recommendation: params.row.recommendation,
        });
      },
      [updateContent]
    );

    // Create the DataGrid's Action column
    const getRatingGridActions = React.useCallback(
      (
        params: GridRowParams<GridValidRowModel>
      ): React.ReactElement<GridActionsCellItemProps>[] => [
        <GridActionsCellItem
          icon={<ArrowDownwardIcon />}
          label="Select"
          onClick={() => handleSelectRating(params)}
        />,
      ],
      [handleSelectRating]
    );

    const statusOptions = React.useMemo(
      () => getEnumAsObject(VulnerabilityStatus),
      []
    );

    const severityOptions = React.useMemo(
      () => getEnumAsObject(SeverityType, "label", [SeverityType.Unknown]),
      []
    );

    const uploadUrl = React.useMemo(
      () => props.queryUrl + "/files",
      [props.queryUrl]
    );

    const onSubmit = React.useCallback(() => {
      const {
        status,
        description,
        observation,
        measure_title,
        measure_recommendation,
        severity,
      } = context.pageManager.content;
      const controlIds = [];
      // Once the user set the vulnerability status to Draft, Final or Resolved, we enforce input validation.
      if (
        [
          VulnerabilityStatus.Review,
          VulnerabilityStatus.Final,
          VulnerabilityStatus.Resolved,
        ].includes(status?.id)
      ) {
        if (!isValidString(description)) {
          controlIds.push("description");
        }
        if (!isValidString(observation)) {
          controlIds.push("observation");
        }
        if (!isValidString(measure_title)) {
          controlIds.push("measure_title");
        }
        if (!isValidString(measure_recommendation)) {
          controlIds.push("measure_recommendation");
        }
        if (!isNotNullUndefined(severity)) {
          controlIds.push("severity");
        }
      }
      if (controlIds.length == 0) {
        submitOnly();
      } else {
        setErrors(controlIds);
      }
    }, [submitOnly, setErrors, context.pageManager.content]);

    const ratingData = React.useMemo(() => {
      return ratingQuery?.data ?? [];
    }, [ratingQuery?.data]);

    if (ratingQuery.isFetching) {
      return <LoadingIndicator open={true} />;
    }
    return (
      <>
        {/*TODO LoadingIndicator must be displayed for loading the ratings table and saving the form*/}
        <LoadingIndicator open={context.putMutation.isPending} />
        <UseMutationSnackbarAlert
          mutation={context.putMutation}
          successMessage="Vulnerability successfully updated."
        />
        <PageManagerSnackbarAlert pageManagerContext={context} />
        <SaveSpeedDial onClick={onSubmit} />
        <DetailsDialogPaper>
          <Grid container spacing={2}>
            <Grid item xs={6} md={4}>
              <Item>
                <InputControlFieldWrapper
                  id="status"
                  context={context}
                  options={statusOptions}
                  isOptionEqualToValue={isOptionEqualToValue}
                />
              </Item>
            </Grid>
            <Grid item xs={6} md={8}>
              <Item>
                <InputControlFieldWrapper id="name" context={context} />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper
                  id="description"
                  context={context}
                  minRows={10}
                  maxRows={10}
                  insertLabel={true}
                  uploadUrl={uploadUrl}
                />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper
                  id="observation"
                  context={context}
                  minRows={10}
                  maxRows={10}
                  insertLabel={true}
                  uploadUrl={uploadUrl}
                />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper
                  id="references"
                  context={context}
                  minRows={4}
                  maxRows={4}
                  insertLabel={true}
                  uploadUrl={uploadUrl}
                />
              </Item>
            </Grid>
          </Grid>
        </DetailsDialogPaper>
        <DetailsDialogPaper>
          <Grid container spacing={2}>
            <Grid item xs={6} md={12}>
              <Item>
                <MeasureSelection
                  vulnerabilityId={props.vulnerabilityId}
                  isTemplate={props.isTemplate}
                  queryUrl={props.queryUrl}
                  meQuery={meQuery}
                  onMeasureSelect={handleSelectMeasure}
                  report={props.report}
                />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper
                  id="measure_title"
                  context={context}
                />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper
                  id="measure_recommendation"
                  context={context}
                  minRows={10}
                  maxRows={10}
                  insertLabel={true}
                  uploadUrl={uploadUrl}
                />
              </Item>
            </Grid>
          </Grid>
        </DetailsDialogPaper>
        <DetailsDialogPaper>
          <Grid container spacing={2}>
            {props.isTemplate && (
              <Grid item xs={6} md={12}>
                <Item style={{ height: "270px" }}>
                  <PagesDataGrid
                    page={MainPages.Ratings}
                    isLoading={ratingQuery.isLoading}
                    rows={ratingData}
                    user={meQuery.data!}
                    columns={RATING_COLUMN_DEFINITION}
                    getCellValueFn={valueGetter}
                    renderCellFn={renderCell}
                    getTableActions={getRatingGridActions}
                  />
                </Item>
              </Grid>
            )}
            <Grid item xs={6} md={4}>
              <Item>
                <InputControlFieldWrapper
                  id="severity"
                  context={context}
                  options={severityOptions}
                  // getOptionLabel={(option) => option.name}
                  isOptionEqualToValue={isOptionEqualToValue}
                />
              </Item>
            </Grid>
            <Grid item xs={6} md={4}>
              <Item>
                <InputControlFieldWrapper id="cvss_score" context={context} />
              </Item>
            </Grid>
            <Grid item xs={6} md={10}>
              <Item>
                <InputControlFieldWrapper id="cvss_vector" context={context} />
              </Item>
            </Grid>
            <Grid item xs={6} md={2}>
              <Item>
                <CvssCalculatorButton cvss_vector={cvss_vector} />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper
                  id="rating_comment"
                  context={context}
                  minRows={4}
                  maxRows={4}
                  insertLabel={true}
                  uploadUrl={uploadUrl}
                />
              </Item>
            </Grid>
          </Grid>
        </DetailsDialogPaper>
        <DetailsDialogPaper>
          <Grid container spacing={2}>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper id="vrt" context={context} />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper id="cwe_weakness" context={context} />
              </Item>
            </Grid>
            <Grid item xs={6} md={12}>
              <Item>
                <InputControlFieldWrapper
                  id="cwe_category"
                  context={context}
                  readonly={true}
                />
              </Item>
            </Grid>
            {!props.isTemplate && (
              <Grid item xs={6} md={12}>
                <Item>
                  <InputControlFieldWrapper
                    id="template_candidate"
                    context={context}
                  />
                </Item>
              </Grid>
            )}
          </Grid>
        </DetailsDialogPaper>
      </>
    );
  }
);

export default VulnerabilityForm;
