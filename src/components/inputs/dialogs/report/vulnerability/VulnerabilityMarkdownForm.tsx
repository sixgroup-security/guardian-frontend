/**
 * This file is part of Guardian.
 *
 * Guardian is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Guardian is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.
 *
 * @author Lukas Reiter
 * @copyright Copyright (C) 2024 Lukas Reiter
 * @license GPLv3
 */

import React from "react";
import Tab from "@mui/material/Tab";
import TabPanel from "@mui/lab/TabPanel";
import TabbedPane from "../../../../navigation/TabbedPane";
import VulnerabilityForm from "./VulnerabilityForm";
import MarkdownField from "../../../MarkdownField";
import { ReportTestingRead } from "../../../../../models/report";
import { usePageManager } from "../../../../../util/hooks/usePageManager";
import { useQuery } from "../../../../../util/hooks/tanstack/useQuery";
import {
  Vulnerability,
  COLUMN_DEFINITION as VULNERABILITY_COLUMN_DEFINITION,
} from "../../../../../models/vulnerability";
import { QueryKey } from "@tanstack/react-query";
import { Alert } from "@mui/material";
import LoadingIndicator from "../../../../feedback/LoadingIndicator";

interface VulnerabilityMarkdownFormProps {
  vulnerabilityUrl: string;
  vulnerabilityQueryKey: QueryKey;
  invalidateQueryKeys: QueryKey[];
  enabled: boolean;
  // vulnerability?: Vulnerability;
  report?: ReportTestingRead;
}

const VulnerabilityMarkdownForm = React.memo(
  (props: VulnerabilityMarkdownFormProps) => {
    // Obtain data from backend once a VulnerabilityTreeNode is selected.
    const query = useQuery({
      path: props.vulnerabilityUrl,
      queryKey: props.vulnerabilityQueryKey,
      enabled: props.enabled,
      // disableAutoUpdate: true,
    });
    // The form/page manager for tracking the content of the VulnerabilityForm component
    const context = usePageManager({
      columns: VULNERABILITY_COLUMN_DEFINITION,
      apiEndpoint: props.vulnerabilityUrl,
      queryKey: props.vulnerabilityQueryKey,
      switchToEditMode: false,
      navigateable: false,
      // Submissions must also invalidate the query cache to ensure the TreeView component is updated
      invalidateQueryKeys: props.invalidateQueryKeys,
    });
    const { showEditDialog, closeDialog } = context;

    // convert the query data to a vulnerability object
    const vulnerability = React.useMemo(
      () => (query.isSuccess ? new Vulnerability(query.data) : undefined),
      [query.data, query.isSuccess]
    );

    // Initialize the page manager once the vulnerability data successfully loaded
    React.useEffect(() => {
      if (vulnerability) {
        showEditDialog("Enter report details.", [], vulnerability);
      }
    }, [
      // The following line causes an infinite loop.
      closeDialog,
      showEditDialog,
      vulnerability,
    ]);

    const content = React.useMemo(
      () =>
        vulnerability?.getMarkdown(
          props.report?.report_template?.summary_template
        ) ?? "",
      [vulnerability, props.report?.report_template?.summary_template]
    );

    const isTemplate = React.useMemo(
      () => vulnerability?.source_template_id !== null,
      [vulnerability?.source_template_id]
    );

    const tabTitles = React.useMemo(
      () => [
        <Tab
          id={"user-input"}
          key={"user-input"}
          label={"User Input"}
          value={"0"}
        />,
        <Tab id={"markdown"} key={"markdown"} label={"Markdown"} value={"1"} />,
      ],
      []
    );

    const tabContents = React.useMemo(
      () => [
        <TabPanel
          id={"user-input"}
          key={"user-input"}
          value={"0"}
          sx={{ pl: 0, pr: 0 }}
        >
          <VulnerabilityForm
            isTemplate={isTemplate}
            queryUrl={props.vulnerabilityUrl}
            vulnerabilityId={vulnerability?.id ?? ""}
            context={context}
            report={props.report}
          />
        </TabPanel>,
        <TabPanel
          id={"markdown"}
          key={"markdown"}
          value={"1"}
          sx={{ pl: 0, pr: 0 }}
        >
          <MarkdownField content={content} />
        </TabPanel>,
      ],
      [
        props.vulnerabilityUrl,
        vulnerability?.id,
        context,
        isTemplate,
        props.report,
        content,
      ]
    );

    // We show an error, if requesting the data failed.
    if (query.isError) {
      return <Alert severity="error">Error loading data</Alert>;
    }

    // The page manager must be fully initialized before we can proceed.
    if (
      !context.pageManager.content ||
      Object.keys(context.pageManager.content).length == 0
    ) {
      return <LoadingIndicator open={true} />;
    }

    return <TabbedPane tabTitles={tabTitles} tabContents={tabContents} />;
  }
);
export default VulnerabilityMarkdownForm;
