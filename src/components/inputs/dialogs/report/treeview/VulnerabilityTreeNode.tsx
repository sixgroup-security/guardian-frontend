/**
 * This file is part of Guardian.
 *
 * Guardian is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Guardian is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyAwesomeProject. If not, see <https://www.gnu.org/licenses/>.
 *
 * @author Lukas Reiter
 * @copyright Copyright (C) 2024 Lukas Reiter
 * @license GPLv3
 */

import { Box, Typography, Divider, Chip, Tooltip } from "@mui/material";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import DeleteOutlineIcon from "@mui/icons-material/DeleteOutline";
import CheckIcon from "@mui/icons-material/Check";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
import PriorityHighIcon from "@mui/icons-material/PriorityHigh";
import DraftsIcon from "@mui/icons-material/Drafts";
import { EventHandlerType } from "../../../../../models/treeview/treeNodeBase";
import StyledTreeItem from "../../../../data/treeview/StyledTreeItem";
import { SeverityType, VulnerabilityStatus } from "../../../../../models/enums";
import ReportSectionTreeNode from "./ReportSectionTreeNode";
import ProcedureTreeNode from "./ProcedureTreeNode";
import MenuItemEntry from "../../../../data/treeview/MenuItemEntry";
import TreeViewItemMenu from "../../../../data/treeview/TreeViewItemMenu";
import { useTreeViewItemMenu } from "../../../../../util/hooks/treeview/useTreeViewProvider";
import { ratingColors } from "../../../../../layout/theme";
import { downloadFile } from "../../../../../util/common";
import { ReportLeafTreeNode } from "./ReportLeafTreeNode";

const ICON_MAP: { [key in VulnerabilityStatus]?: any } = {
  [VulnerabilityStatus.Draft]: <DraftsIcon />,
  [VulnerabilityStatus.Hide]: <VisibilityOffIcon />,
  [VulnerabilityStatus.Resolved]: <CheckIcon />,
  [VulnerabilityStatus.Review]: <PriorityHighIcon />,
};

const ICON_DESCRIPTION: { [key in VulnerabilityStatus]?: string } = {
  [VulnerabilityStatus.Draft]: "Draft",
  [VulnerabilityStatus.Final]: "Final",
  [VulnerabilityStatus.Hide]: "Hide",
  [VulnerabilityStatus.Resolved]: "Resolved",
  [VulnerabilityStatus.Review]: "Review",
};

export const NodeContent = ({
  object,
  handler,
  readonly,
}: {
  object: VulnerabilityTreeNode;
  handler: EventHandlerType;
  readonly: boolean;
}) => {
  const treeViewItemMenuManager = useTreeViewItemMenu();
  const severityColor =
    [
      VulnerabilityStatus.Final,
      VulnerabilityStatus.Review,
      VulnerabilityStatus.Hide,
      VulnerabilityStatus.Draft,
      VulnerabilityStatus.Resolved,
    ].includes(object.status) && object.severity in ratingColors
      ? ratingColors[object.severity]
      : undefined;
  return (
    <Box
      sx={{
        display: "flex",
        alignItems: "center",
        p: 1,
        pr: 0,
      }}
    >
      <Tooltip title={ICON_DESCRIPTION[object.status]}>
        <Chip
          icon={ICON_MAP[object.status]}
          label={object.vulnerability_id_str}
          variant="outlined"
          size="small"
          sx={{ mr: 1, borderColor: severityColor, minWidth: "80px" }}
        />
      </Tooltip>
      <Typography variant="body2" sx={{ flexGrow: 1 }}>
        {object.name}
      </Typography>
      <TreeViewItemMenu manager={treeViewItemMenuManager}>
        <MenuItemEntry
          onClick={() => {
            treeViewItemMenuManager.handleClose();
            navigator.clipboard.writeText(`\\nameref{${object.reference}}`);
          }}
          icon={ContentCopyIcon}
          title="Copy Reference"
          shortcut="⌘C"
        />
        <Divider />
        <MenuItemEntry
          disabled={!object.has_pdf}
          onClick={() => {
            downloadFile(`${object.getUrl()}/pdf`);
            console.dir(object);
          }}
          icon={ContentCopyIcon}
          title="Download PDF File"
          shortcut="⌘C"
        />
        <MenuItemEntry
          disabled={!object.has_tex}
          onClick={() => {
            downloadFile(`${object.getUrl()}/tex`);
            console.dir(object);
          }}
          icon={ContentCopyIcon}
          title="Download LaTeX Source"
          shortcut="⌘C"
        />
        <MenuItemEntry
          disabled={!object.has_pdf_log}
          onClick={() => {
            downloadFile(`${object.getUrl()}/pdf-log`);
            console.dir(object);
          }}
          icon={ContentCopyIcon}
          title="Download Log File"
          shortcut="⌘C"
        />
        <Divider />
        <MenuItemEntry
          disabled={readonly}
          onClick={() => {
            treeViewItemMenuManager.handleClose();
            if (handler.onDelete) {
              handler.onDelete!(null);
            }
          }}
          icon={DeleteOutlineIcon}
          title="Delete"
          shortcut="⌘D"
        />
      </TreeViewItemMenu>
    </Box>
  );
};

/*
 * Class for a tree node that can contain other nodes.
 */
export default class VulnerabilityTreeNode extends ReportLeafTreeNode {
  public reference: string;
  public vulnerability_id_str: string;
  public severity: SeverityType;
  public status: VulnerabilityStatus;
  public has_pdf: boolean;
  public has_pdf_log: boolean;
  public has_tex: boolean;
  /*
   * Constructor for SectionNode, setting type to 'section' and initializing the children array
   */
  constructor(
    uid: string,
    name: string,
    reference: string,
    vulnerability_id_str: string,
    severity: number,
    status: VulnerabilityStatus,
    has_pdf: boolean,
    has_pdf_log: boolean,
    has_tex: boolean
  ) {
    super(uid, name);
    this.reference = reference;
    this.vulnerability_id_str = vulnerability_id_str;
    this.severity = severity;
    this.status = status;
    this.has_pdf = has_pdf;
    this.has_pdf_log = has_pdf_log;
    this.has_tex = has_tex;
  }

  /*
   * Returns a StyledTreeItem component for the node.
   */
  getComponent(
    children: JSX.Element[],
    handler: EventHandlerType,
    readonly: boolean
  ) {
    return (
      <StyledTreeItem
        key={this.id}
        nodeId={this.id}
        label={
          <NodeContent object={this} handler={handler} readonly={readonly} />
        }
        // This event handler is called when the node is clicked.
        onClick={
          handler.onClick ? (event) => handler.onClick!(event, this) : undefined
        }
      >
        {children}
      </StyledTreeItem>
    );
  }

  /*
   * Returns the type of the node.
   */
  getType(): string {
    return "vulnerability";
  }

  /*
   * Returns the URL for the current procedure.
   *
   * baseUrl: /projects/{project_id}/reports/{report_id}
   * /report-sections/{section_id}/playbooks/{playbook_id}/sections/{section_id}/procedures/{procedure_id}
   */
  getUrl(): string {
    if (!this.parent) {
      throw new Error("VulnerabilityTreeNode has no parent");
    }
    if (
      !(this.parent instanceof ProcedureTreeNode) &&
      !(this.parent instanceof ReportSectionTreeNode)
    ) {
      throw new Error("Parent node has no valid type.");
    }
    return this.parent.getUrl() + "/vulnerabilities/" + this.id;
  }

  static create(
    id: string,
    title: string,
    reference: string,
    vulnerability_id_str: string,
    severity: number,
    status: VulnerabilityStatus,
    has_pdf: boolean,
    has_pdf_log: boolean,
    has_tex: boolean
  ) {
    const node = new VulnerabilityTreeNode(
      id,
      title,
      reference,
      vulnerability_id_str,
      severity,
      status,
      has_pdf,
      has_pdf_log,
      has_tex
    );
    return node;
  }
}
